# OpenVPN Server on Windows with Raspberry Pi Client Setup

## Overview

This guide covers setting up OpenVPN server on Windows machine with Raspberry Pi connecting as a client in a dual-server configuration.

## Prerequisites

- Windows machine with administrative privileges
- Raspberry Pi with network connectivity
- Router access for port forwarding
- External IP address for remote access

## Windows Server Installation

### 1. Install OpenVPN

1. Download OpenVPN Community Edition from https://openvpn.net/community-downloads/
2. Run installer as Administrator
3. Ensure these components are selected:
   - OpenVPN Service
   - OpenVPN GUI
   - Easy-RSA 3 Certificate Management Scripts
   - TAP-Windows driver

### 2. Download Easy-RSA

1. Download latest Easy-RSA from https://github.com/OpenVPN/easy-rsa/releases
2. Download "EasyRSA-3.x.x-win64.zip"
3. Extract to `C:\Program Files\OpenVPN\easy-rsa\`

## Certificate Generation

### 1. Initialize PKI

```cmd
# Open Command Prompt as Administrator
cd "C:\Program Files\OpenVPN\easy-rsa"
EasyRSA-Start.bat
```

### 2. Generate Certificates

In the EasyRSA Shell:

```bash
# Initialize certificate authority
easyrsa init-pki

# Build CA (press Enter for defaults)
easyrsa build-ca nopass

# Generate server certificate
easyrsa gen-req windows-server nopass
easyrsa sign-req server windows-server

# Generate client certificate
easyrsa gen-req client-pi nopass
easyrsa sign-req client client-pi

# Generate Diffie-Hellman parameters (takes several minutes)
easyrsa gen-dh

# Exit EasyRSA shell
exit
```

### 3. Generate TLS Authentication Key

```cmd
cd "C:\Program Files\OpenVPN\bin"
openvpn.exe --genkey secret "C:\Program Files\OpenVPN\easy-rsa\ta.key"
```

## Server Configuration

### 1. Create Server Config

Create `C:\Program Files\OpenVPN\config\server.conf`:

```
port 1195
proto udp
dev tun
ca "C:\\Program Files\\OpenVPN\\easy-rsa\\pki\\ca.crt"
cert "C:\\Program Files\\OpenVPN\\easy-rsa\\pki\\issued\\windows-server.crt"
key "C:\\Program Files\\OpenVPN\\easy-rsa\\pki\\private\\windows-server.key"
dh "C:\\Program Files\\OpenVPN\\easy-rsa\\pki\\dh.pem"
topology subnet
server 10.9.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
push "route 192.168.0.0 255.255.255.0"
client-to-client
keepalive 10 120
tls-auth "C:\\Program Files\\OpenVPN\\easy-rsa\\ta.key" 0
cipher AES-256-GCM
auth SHA256
max-clients 5
persist-key
persist-tun
status openvpn-status.log
log-append openvpn.log
verb 3
explicit-exit-notify 1
```

### 2. Configure Windows Firewall

```cmd
# Run Command Prompt as Administrator
netsh advfirewall firewall add rule name="OpenVPN Server" dir=in action=allow protocol=udp localport=1195
netsh advfirewall firewall add rule name="VPN Subnet" dir=in action=allow protocol=any remoteip=10.9.0.0/24
```

### 3. Start OpenVPN Server

```cmd
cd "C:\Program Files\OpenVPN\bin"
openvpn.exe --config "C:\Program Files\OpenVPN\config\server.conf"
```

## Router Configuration

### Port Forwarding

Add port forwarding rule:
- **External Port:** 1195
- **Protocol:** UDP
- **Internal IP:** Windows machine's IP address
- **Internal Port:** 1195

## Raspberry Pi Client Setup

### 1. Create Client Configuration

Create `~/pi-client.ovpn` on Raspberry Pi:

```
client
dev tun
proto udp
remote YOUR_EXTERNAL_IP 1195
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
cipher AES-256-GCM
auth SHA256
key-direction 1
verb 3

<ca>
[Copy contents of Windows: C:\Program Files\OpenVPN\easy-rsa\pki\ca.crt]
</ca>

<cert>
[Copy contents of Windows: C:\Program Files\OpenVPN\easy-rsa\pki\issued\client-pi.crt]
</cert>

<key>
[Copy contents of Windows: C:\Program Files\OpenVPN\easy-rsa\pki\private\client-pi.key]
</key>

<tls-auth>
[Copy contents of Windows: C:\Program Files\OpenVPN\easy-rsa\ta.key]
</tls-auth>
```

### 2. Connect Pi to Windows Server

```bash
# Connect as client
sudo openvpn ~/pi-client.ovpn

# Pi should receive IP in 10.9.0.x range
# Windows server will be at 10.9.0.1
```

## Network Architecture

```
[Pi Client] 10.9.0.2 ←→ 10.9.0.1 [Windows Server]
                    ↕
              [Home Network] 192.168.0.0/24
```

## Testing

### Verify Connection

```bash
# On Pi, test connection to Windows server
ping 10.9.0.1

# Test access to home network
ping 192.168.0.183

# SSH through VPN tunnel
ssh user@10.9.0.1
```

### Check Server Status

```cmd
# On Windows, verify server is listening
netstat -an | findstr :1195

# Check client connections in server logs
```

## Troubleshooting

### Windows Firewall Issues
- Ensure Windows firewall allows inbound connections from VPN subnet
- Set VPN network profile to "Private" instead of "Public"

### Certificate Problems  
- Verify all certificate files exist in correct locations
- Check certificate content is properly copied (including BEGIN/END lines)

### Router Connectivity
- Confirm port 1195 is forwarded to Windows machine
- Test external port accessibility using online port checkers
- Verify Windows machine has static IP or DHCP reservation

## Network Requirements

- Windows server uses VPN subnet 10.9.0.0/24
- External router port 1195 forwarded to Windows machine
- Pi connects as client and receives IP 10.9.0.2
- Windows server accessible at 10.9.0.1 from VPN clients

Server (Windows): OpenVPN server on LAN (UDP 1195).
Client (Raspberry Pi): OpenVPN client on same LAN.
VPN subnet: 10.9.0.0/24 (server 10.9.0.1, Pi 10.9.0.2).


1 Windows — Server config & start

Save server config as:
C:\Program Files\OpenVPN\config\server.ovpn

Minimal essentials:
port 1195
proto udp
dev tun
server 10.9.0.0 255.255.255.0
tls-auth "C:\Program Files\OpenVPN\easy-rsa\ta.key" 0
data-ciphers AES-256-GCM
auth SHA256
keepalive 10 120
log-append "C:\Program Files\OpenVPN\log\openvpn.log"
verb 3


Run once in foreground (to catch errors):
"C:\Program Files\OpenVPN\bin\openvpn.exe" --config "C:\Program Files\OpenVPN\config\server.ovpn"

Expect: Initialization Sequence Completed.
Check it’s listening:
netstat -ano -p udp | find ":1195"

Expect a UDP listener.
Allow Windows Firewall:
New-NetFirewallRule -DisplayName "OpenVPN UDP 1195" -Direction Inbound -Action Allow -Protocol UDP -LocalPort 1195




2 Pi — Client config & run

We first tried a systemd unit and saw it fail:
sudo systemctl status openvpn@windows-client
# Active: ... (Result: exit-code)


Then we ran the client in foreground (works, and shows real errors if any):
sudo openvpn ~/windows-client.ovpn

This connected, assigned 10.9.0.2, and showed Initialization Sequence Completed.

Client essentials (in windows-client.ovpn):
client
dev tun
proto udp
remote 192.168.1.1 1195     # server’s LAN IP
data-ciphers AES-256-GCM
auth SHA256
key-direction 1
# inline <ca>, <cert>, <key>, <tls-auth> blocks included


3 Routing fix (stopped SSH dropouts)

Problem: pushing the LAN route to a client on the same LAN hijacked SSH.
Fix used: stop pushing the LAN route on the server (removed push "route 192.168.1.0 255.255.255.0").

(Alternative on client: pull-filter ignore "route 192.168.1.0 255.255.255.0" or route-nopull with a route ... net_gateway.)



Result: tunnel stays up, SSH over Ethernet remains stable.

4 Optional — make the Pi auto-start later
sudo cp ~/windows-client.ovpn /etc/openvpn/windows-client.conf
sudo apt install -y dos2unix && sudo dos2unix /etc/openvpn/windows-client.conf
sudo chmod 600 /etc/openvpn/windows-client.conf
sudo systemctl enable --now openvpn@windows-client


5 Verification

From Pi: ping 10.9.0.1 (server’s VPN IP).
From Windows: ping 10.9.0.2 (Pi’s VPN IP).
Check tunnel iface on Pi: ip addr show tun0 (or tun1).


6 (Optional) Reach other LAN devices

Router static route (recommended): add 10.9.0.0/24 → next hop = Windows LAN IP.
Or NAT on Windows (ICS/RRAS) so VPN clients can reach 192.168.1.0/24.


7 Security cleanup (do this soon)

Revoke the old client cert and generate a new client cert/key (the old key was pasted publicly).
Generate a fresh ta.key (or switch both sides to tls-crypt with a new key).
Update both configs and reconnect.


That’s it. We validated the server by foreground-running openvpn.exe, confirmed UDP 1195 with netstat, confirmed the Pi service initially failed, then foreground-ran the Pi client (sudo openvpn ~/windows-client.ovpn) and cleaned up routing so SSH stays alive.





##NOTE: the internet stop due to traffic flowing only through the VPN tunnel, had to disable firewall using "sudo ufw status" the Changing the WiFi route priority to superced the eth0  
# Remove current WiFi default route
sudo ip route del default via 192.168.0.1 dev wlan0

# Add WiFi route with higher priority (lower metric number)
sudo ip route add default via 192.168.0.1 dev wlan0 metric 50

# Check the new routing table
ip route show


default via 192.168.0.1 dev wlan0 metric 50     # Higher priority
default via 192.168.1.1 dev eth0 metric 100    # Lower priority

ping -c 3 8.8.8.8